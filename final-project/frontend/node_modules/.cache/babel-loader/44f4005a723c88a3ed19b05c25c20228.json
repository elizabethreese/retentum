{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _wrapString = _interopRequireDefault(require(\"./wrapString\"));\n\nvar _wrapWord = _interopRequireDefault(require(\"./wrapWord\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Wrap a single cell value into a list of lines\n *\n * Always wraps on newlines, for the remainder uses either word or string wrapping\n * depending on user configuration.\n *\n * @param {string} cellValue\n * @param {number} columnWidth\n * @param {boolean} useWrapWord\n * @returns {Array}\n */\n\n\nconst wrapCell = (cellValue, columnWidth, useWrapWord) => {\n  // First split on literal newlines\n  const cellLines = cellValue.split('\\n'); // Then iterate over the list and word-wrap every remaining line if necessary.\n\n  for (let lineNr = 0; lineNr < cellLines.length;) {\n    let lineChunks;\n\n    if (useWrapWord) {\n      lineChunks = (0, _wrapWord.default)(cellLines[lineNr], columnWidth);\n    } else {\n      lineChunks = (0, _wrapString.default)(cellLines[lineNr], columnWidth);\n    } // Replace our original array element with whatever the wrapping returned\n\n\n    cellLines.splice(lineNr, 1, ...lineChunks);\n    lineNr += lineChunks.length;\n  }\n\n  return cellLines;\n};\n\nvar _default = wrapCell;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}