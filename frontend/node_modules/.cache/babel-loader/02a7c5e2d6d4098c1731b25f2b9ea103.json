{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isNumber2 = _interopRequireDefault(require(\"lodash/isNumber\"));\n\nvar _isString2 = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _stringWidth = _interopRequireDefault(require(\"string-width\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst alignments = ['left', 'right', 'center'];\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\nconst alignLeft = (subject, width) => {\n  return subject + ' '.repeat(width);\n};\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\n\nconst alignRight = (subject, width) => {\n  return ' '.repeat(width) + subject;\n};\n/**\n * @param {string} subject\n * @param {number} width\n * @returns {string}\n */\n\n\nconst alignCenter = (subject, width) => {\n  let halfWidth;\n  halfWidth = width / 2;\n\n  if (halfWidth % 2 === 0) {\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth);\n  } else {\n    halfWidth = Math.floor(halfWidth);\n    return ' '.repeat(halfWidth) + subject + ' '.repeat(halfWidth + 1);\n  }\n};\n/**\n * Pads a string to the left and/or right to position the subject\n * text in a desired alignment within a container.\n *\n * @param {string} subject\n * @param {number} containerWidth\n * @param {string} alignment One of the valid options (left, right, center).\n * @returns {string}\n */\n\n\nconst alignString = (subject, containerWidth, alignment) => {\n  if (!(0, _isString2.default)(subject)) {\n    throw new TypeError('Subject parameter value must be a string.');\n  }\n\n  if (!(0, _isNumber2.default)(containerWidth)) {\n    throw new TypeError('Container width parameter value must be a number.');\n  }\n\n  const subjectWidth = (0, _stringWidth.default)(subject);\n\n  if (subjectWidth > containerWidth) {\n    // console.log('subjectWidth', subjectWidth, 'containerWidth', containerWidth, 'subject', subject);\n    throw new Error('Subject parameter value width cannot be greater than the container width.');\n  }\n\n  if (!(0, _isString2.default)(alignment)) {\n    throw new TypeError('Alignment parameter value must be a string.');\n  }\n\n  if (!alignments.includes(alignment)) {\n    throw new Error('Alignment parameter value must be a known alignment parameter value (left, right, center).');\n  }\n\n  if (subjectWidth === 0) {\n    return ' '.repeat(containerWidth);\n  }\n\n  const availableWidth = containerWidth - subjectWidth;\n\n  if (alignment === 'left') {\n    return alignLeft(subject, availableWidth);\n  }\n\n  if (alignment === 'right') {\n    return alignRight(subject, availableWidth);\n  }\n\n  return alignCenter(subject, availableWidth);\n};\n\nvar _default = alignString;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}