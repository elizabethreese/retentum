{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/ElizabethReese/Desktop/Retentum/final-project/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nconst astralRegex = require('astral-regex');\n\nconst ansiStyles = require('ansi-styles');\n\nconst ESCAPES = ['\\u001B', '\\u009B'];\nconst END_CODE = 39;\n\nconst wrapAnsi = code => \"\".concat(ESCAPES[0], \"[\").concat(code, \"m\");\n\nmodule.exports = (str, begin, end) => {\n  const arr = [...str.normalize()];\n  end = typeof end === 'number' ? end : arr.length;\n  let insideEscape = false;\n  let escapeCode = null;\n  let visible = 0;\n  let output = '';\n\n  for (const _ref of arr.entries()) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const i = _ref2[0];\n    const x = _ref2[1];\n    let leftEscape = false;\n\n    if (ESCAPES.includes(x)) {\n      insideEscape = true;\n      const code = /\\d[^m]*/.exec(str.slice(i, i + 18));\n      escapeCode = code === END_CODE ? null : code;\n    } else if (insideEscape && x === 'm') {\n      insideEscape = false;\n      leftEscape = true;\n    }\n\n    if (!insideEscape && !leftEscape) {\n      ++visible;\n    }\n\n    if (!astralRegex({\n      exact: true\n    }).test(x) && isFullwidthCodePoint(x.codePointAt())) {\n      ++visible;\n    }\n\n    if (visible > begin && visible <= end) {\n      output += x;\n    } else if (visible === begin && !insideEscape && escapeCode !== null && escapeCode !== END_CODE) {\n      output += wrapAnsi(escapeCode);\n    } else if (visible >= end) {\n      if (escapeCode !== null) {\n        output += wrapAnsi(ansiStyles.codes.get(parseInt(escapeCode, 10)) || END_CODE);\n      }\n\n      break;\n    }\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}